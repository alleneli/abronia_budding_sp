############################################################
###Make your own reference file with your own alignments!###
############################################################

#Here we make a custom reference file for BWA/GATK using your alignments from the 'Captus align' step.
#I used 04_alignments > 03_trimmed > 06_informed > 01_coding_NUC > 04_genes_flanked.
#Make sure the alignments are all trimmed exactly the way you want them, and put them all in 
#one folder. Then use one of the following two scripts depending on what you want.
# 1) if you just want to look for the longest sequence in each alignment then use this python script:
'longest_seq_fasta_EA.py'
# 2) Or if you want to just call the longest sequence from one taxon, then run this python script instead 
#(you need to edit the script to look for your focal taxon, this one looks for aurita):
'longest_seq_fasta_EA_aurita_only.py'
#I used 'longest_seq_fasta_EA_aurita_only.py', as I wanted a reference using just aurita reads - 
#however, you will have to customize that script to fit the focal taxon you want (just change the taxon name inside the script).
#After that you need to run the script 'python add_filename_to_header.py' to make each header unique.
#BWA and GATK need unique header names so this script will pull the unique alignment name from each 

#Copy all of your alignments and the respective scripts into a folder.
##CAREFUL!!## 
#Make sure you have your alignments saved elsewhere before these next steps, 
#we will be deleting them because the scripts automatically pull any file name in your working directory ending in '.fna'.
#Now navigate to your working directory in the console and run the following one line at a time:

python longest_seq_fasta_EA.py
rm *.fna
for file in *.longest; do mv -- "$file" "${file%.longest}";done
python add_filename_to_header.py

#Now concatenate into one file

cat *_file_header.fna > clarkia_reference.fna

#Now we want to make sure your reference file doesn’t have any indels (indels look like dashes: #“-------”),
#lets turn those dashes to N’s (neutral placeholders instead of ACTG’s)

sed 's/-/N/g' clarkia_reference.fna > clarkia_ref.fna

##################
###BWA and GATK###
##################

###Useful Resource for BWA/GATK###
###Variant calling using GATK4 : https://www.melbournebioinformatics.org.au/tutorials/tutorials/variant_calling_gatk1/variant_calling_gatk1/

#Here we will make a SNP dataset from our cleaned reads using BWA and GATK.
#Use the cleaned forward and reverse (R1 and R2) reads produced by the 'Captus Clean* step, from the folder 01_clean_reads.
#Copy all your cleaned forward and reverse reads into a folder with the entire contents of the following toolkits:
# - BWA (https://github.com/lh3/bwa)
# - GATK (https://gatk.broadinstitute.org/hc/en-us/articles/360036194592-Getting-started-with-GATK4)
# - Picard Tools (https://github.com/broadinstitute/picard)
# - IGV (https://github.com/igvteam/igv)
# - Your reference file made in the above steps (I used 'aurita_ref.fna')
# - The Bash script 'abronia_bwa_gatk_script_4.0.sh' from this repository
##IMOPORTANT!!##
#A note about the above bash script, you will need to change the names of the files called throughout to match your reads, references, etc.
#Things you will likely have to change:
# - anytime it calls '.fasta.gz' if you are using a different file type like 'fq.gz'
# - antyime it calls 'normalized_aurita_ref.fna' to your respective reference name (your reference file will be 'normalized' for this script in the next step)
# - towards the end of the script it will create and call a series of files that start with 'abronia_combine', rename these if you want 
# - it will create a list of all .g.cvf files named abr_list (for abronia list), you can rename this if you want, it will get called later in the script

#Normalize your reference with GATK.
java -jar gatk-package-4.4.0.0-local.jar NormalizeFasta -I abronia_ref.fna -O normalized_abronia_ref.fna

#Run BWA GATK script.
Bash abronia_bwa_gatk_script_4.0.sh

#If the script throws an error I recommend running it one line (or block) at a time by copying them into the console. The script is very long so this is the easiest way to troubleshoot.

#This should produce the file 'abronia_combine_genotyped_SelVar.g.vcf.gz' as the final output, which can be viewed in IGV using the script igv.sh (in the console run: bash igv.sh).
#Once IGV is running, use the top tabs to open your reference file (normalized_abronia_ref.fna) as the 'Genome' and 'abronia_combine_genotyped_SelVar.g.vcf.gz' as the 'file'.

###########
###PLINK###
###########

###Useful Resource for PLINK###
## Drew Larson et al. 2021 Supplemental : Admixture may be extensive among hyperdominant Amazon rainforest tree species : Specifically the README from their Dryad repository, 
## I have included their README in this repository as 'Larson_Admixture_README.pdf', the most useful part is the STRUCTURE section.

#To start off you need to make custom X.plink.txt and X.pops.txt file, take a look at mine and read through the STRUCTURE section of 'Larson_Admixture_README.pdf'
#An easy way to get started is by making a list of all your taxa based off of their filenames using list (ls) in the bash console.
#Here is a blurb about how they should look from Larson et al. : 

## X.plink.txt is a file that lists the samples to include in the subset in the following format:
## sample_label(tab)sample_label. For example:
## EstrL772 EstrL772
## EsbrL733 EsbrL733

## X.pops.txt is a comma-delimited file where the first column is the sample name and the second
## column is the population (species) to which that sample is thought to belong. For example:
## EswaL695,2
## EswaL832,2
## EscoL796,1
## EscoL824,1

#Once X.plink.txt and X.pops.txt are properly formatted you want to put them into a working directory with the following:
# - the entire contents of PLINK and PLINK2.0
# - your output .vcf from the BWA/GATK script 'abronia_combine_genotyped_SelVar.g.vcf.gz', that has been extracted/unzipped to make it 'abronia_combine_genotyped_SelVar.g.vcf'
#After this I ran PLINK as follows:

./plink --vcf abronia_combine_genotyped_SelVar.g.vcf --keep X.plink.txt --allow-extra-chr --double-id --make-bed --out no_gra

./plink2 --allow-extra-chr --bfile no_gra --set-all-var-ids @_#_\$r_\$a --out no_gra_prefilter --make-bed

./plink2 -bfile no_gra_prefilter  --geno 0.2 --maf 0.1 --indep-pairwise 50 1 0.1 --bad-ld --allow-extra-chr --out maf_0.1_geno_0.2_bad_LD --make-bed

./plink2 --allow-extra-chr --bfile maf_0.1_geno_0.2_bad_LD --out maf_0.1_geno_0.2_bad_LD_final --make-bed --extract  maf_0.1_geno_0.2_bad_LD.prune.in 

./plink2 -bfile maf_0.1_geno_0.2_bad_LD_final --recode vcf -out new_vcf_maf_0.1_geno_0.2_bad_LD_final

#This will produce the .bim, .bam, .fam, and .log files we need for Structure

###############
###STRUCTURE###
###############

#I used Structure_threader (https://structure-threader.readthedocs.io/en/latest/) to run fastStructure, 
#their documentation is great and the creator responds quickly to issues posted on the github (https://github.com/StuntsPT/Structure_threader/issues/new).
#Understanding of STRCUTURE and Structure_threader is IMPERATIVE before you continue forward!

#You will need to install Structure_threader

pip3 install structure_threader --user

structure_threader params -o test

#You will need to also set a PATH to where Structure_threader was installed. NOTE this is not code you should just copy and paste, you need to know how to make A PATH through the /bin/

export PATH=/home/eja56/.local/bin:$PATH

#You will now need to make some custom files for Structure_threader and throw them into a working directory along with your PLINK outputs,
#the details for making these is well documented on their webpage, and you can see examples of mine in the 'STRUCTURE' folder.
#Here is a list of everything you need for your working directory:
# - ind.txt (easily modified from PLINK's X.pops.txt)
# - pops.txt (not to be confused with X.pops.txt, this is something simple you'll have to make for Structure_threader)
# - mainparams (a text file from Structure_threader, you WILL have to edit this to fit your project, an example of mine is in the 'STRUCTURE' folder)
# - extraparams (a text file from Structure_threader, you MAY have to edit this to fit your project, an example of mine is in the 'STRUCTURE' folder)
# - maf_0.1_geno_0.2_bad_LD_final.bed
# - maf_0.1_geno_0.2_bad_LD_final.bim
# - maf_0.1_geno_0.2_bad_LD_final.fam
# - maf_0.1_geno_0.2_bad_LD_final.log

#Once everything was set up, I ran the following from the working directory:

structure_threader run -K 10 -i maf_0.1_geno_0.2_bad_LD_final.bed --ind ind_cf.txt -o output_ind_cf -t 5 -fs /big-disk/home/eja56/.local/bin/fastStructure

structure_threader run -K 5 -i maf_0.1_geno_0.2_bad_LD_final.bed --pop pops.txt -o output_pops -t 5 -fs /big-disk/home/eja56/.local/bin/fastStructure

#If you want to see more plots you can use the following:

structure_threader plot -i output_ind_cf -f faststructure -K 2 3 4 5 -o 2_5_plots --ind ind_cf.txt --use-ind-labels

#If you made it this far, Congrats! It took me a semester and a half to get all this worked out (: happy coding
(つ•_•)つ > ⌐■-■ > (つ▀¯▀)つ



